# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  isAdmin: Boolean
  restaurants(
    where: RestaurantWhereInput! = {}
    orderBy: [RestaurantOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Restaurant!]
  restaurantsCount(where: RestaurantWhereInput! = {}): Int
}

type PasswordState {
  isSet: Boolean!
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  isAdmin: BooleanFilter
  restaurants: RestaurantManyRelationFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input RestaurantManyRelationFilter {
  every: RestaurantWhereInput
  some: RestaurantWhereInput
  none: RestaurantWhereInput
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  isAdmin: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  isAdmin: Boolean
  restaurants: RestaurantRelateToManyForUpdateInput
}

input RestaurantRelateToManyForUpdateInput {
  disconnect: [RestaurantWhereUniqueInput!]
  set: [RestaurantWhereUniqueInput!]
  create: [RestaurantCreateInput!]
  connect: [RestaurantWhereUniqueInput!]
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
  isAdmin: Boolean
  restaurants: RestaurantRelateToManyForCreateInput
}

input RestaurantRelateToManyForCreateInput {
  create: [RestaurantCreateInput!]
  connect: [RestaurantWhereUniqueInput!]
}

type Restaurant {
  id: ID!
  name: String
  photo: ImageFieldOutput
  banner: ImageFieldOutput
  user: User
}

type ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  url: String!
}

enum ImageExtension {
  jpg
  png
  webp
  gif
}

input RestaurantWhereUniqueInput {
  id: ID
}

input RestaurantWhereInput {
  AND: [RestaurantWhereInput!]
  OR: [RestaurantWhereInput!]
  NOT: [RestaurantWhereInput!]
  id: IDFilter
  name: StringFilter
  user: UserWhereInput
}

input RestaurantOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input RestaurantUpdateInput {
  name: String
  photo: ImageFieldInput
  banner: ImageFieldInput
  user: UserRelateToOneForUpdateInput
}

input ImageFieldInput {
  upload: Upload!
}

"""
The `Upload` scalar type represents a file upload.
"""
scalar Upload

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input RestaurantUpdateArgs {
  where: RestaurantWhereUniqueInput!
  data: RestaurantUpdateInput!
}

input RestaurantCreateInput {
  name: String
  photo: ImageFieldInput
  banner: ImageFieldInput
  user: UserRelateToOneForCreateInput
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

type FoodCategory {
  id: ID!
  name: String
  restaurant: Restaurant
}

input FoodCategoryWhereUniqueInput {
  id: ID
}

input FoodCategoryWhereInput {
  AND: [FoodCategoryWhereInput!]
  OR: [FoodCategoryWhereInput!]
  NOT: [FoodCategoryWhereInput!]
  id: IDFilter
  name: StringFilter
  restaurant: RestaurantWhereInput
}

input FoodCategoryOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input FoodCategoryUpdateInput {
  name: String
  restaurant: RestaurantRelateToOneForUpdateInput
}

input RestaurantRelateToOneForUpdateInput {
  create: RestaurantCreateInput
  connect: RestaurantWhereUniqueInput
  disconnect: Boolean
}

input FoodCategoryUpdateArgs {
  where: FoodCategoryWhereUniqueInput!
  data: FoodCategoryUpdateInput!
}

input FoodCategoryCreateInput {
  name: String
  restaurant: RestaurantRelateToOneForCreateInput
}

input RestaurantRelateToOneForCreateInput {
  create: RestaurantCreateInput
  connect: RestaurantWhereUniqueInput
}

type Food {
  id: ID!
  name: String
  price: String
  photo: ImageFieldOutput
  ingredients: String
  category: FoodCategory
}

input FoodWhereUniqueInput {
  id: ID
}

input FoodWhereInput {
  AND: [FoodWhereInput!]
  OR: [FoodWhereInput!]
  NOT: [FoodWhereInput!]
  id: IDFilter
  name: StringFilter
  price: StringFilter
  ingredients: StringFilter
  category: FoodCategoryWhereInput
}

input FoodOrderByInput {
  id: OrderDirection
  name: OrderDirection
  price: OrderDirection
  ingredients: OrderDirection
}

input FoodUpdateInput {
  name: String
  price: String
  photo: ImageFieldInput
  ingredients: String
  category: FoodCategoryRelateToOneForUpdateInput
}

input FoodCategoryRelateToOneForUpdateInput {
  create: FoodCategoryCreateInput
  connect: FoodCategoryWhereUniqueInput
  disconnect: Boolean
}

input FoodUpdateArgs {
  where: FoodWhereUniqueInput!
  data: FoodUpdateInput!
}

input FoodCreateInput {
  name: String
  price: String
  photo: ImageFieldInput
  ingredients: String
  category: FoodCategoryRelateToOneForCreateInput
}

input FoodCategoryRelateToOneForCreateInput {
  create: FoodCategoryCreateInput
  connect: FoodCategoryWhereUniqueInput
}

type Review {
  id: ID!
  username: String
  rate: Int
  text: String
  restaurant: Restaurant
}

input ReviewWhereUniqueInput {
  id: ID
}

input ReviewWhereInput {
  AND: [ReviewWhereInput!]
  OR: [ReviewWhereInput!]
  NOT: [ReviewWhereInput!]
  id: IDFilter
  username: StringFilter
  rate: IntNullableFilter
  text: StringFilter
  restaurant: RestaurantWhereInput
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntNullableFilter
}

input ReviewOrderByInput {
  id: OrderDirection
  username: OrderDirection
  rate: OrderDirection
  text: OrderDirection
}

input ReviewUpdateInput {
  username: String
  rate: Int
  text: String
  restaurant: RestaurantRelateToOneForUpdateInput
}

input ReviewUpdateArgs {
  where: ReviewWhereUniqueInput!
  data: ReviewUpdateInput!
}

input ReviewCreateInput {
  username: String
  rate: Int
  text: String
  restaurant: RestaurantRelateToOneForCreateInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createRestaurant(data: RestaurantCreateInput!): Restaurant
  createRestaurants(data: [RestaurantCreateInput!]!): [Restaurant]
  updateRestaurant(
    where: RestaurantWhereUniqueInput!
    data: RestaurantUpdateInput!
  ): Restaurant
  updateRestaurants(data: [RestaurantUpdateArgs!]!): [Restaurant]
  deleteRestaurant(where: RestaurantWhereUniqueInput!): Restaurant
  deleteRestaurants(where: [RestaurantWhereUniqueInput!]!): [Restaurant]
  createFoodCategory(data: FoodCategoryCreateInput!): FoodCategory
  createFoodCategories(data: [FoodCategoryCreateInput!]!): [FoodCategory]
  updateFoodCategory(
    where: FoodCategoryWhereUniqueInput!
    data: FoodCategoryUpdateInput!
  ): FoodCategory
  updateFoodCategories(data: [FoodCategoryUpdateArgs!]!): [FoodCategory]
  deleteFoodCategory(where: FoodCategoryWhereUniqueInput!): FoodCategory
  deleteFoodCategories(where: [FoodCategoryWhereUniqueInput!]!): [FoodCategory]
  createFood(data: FoodCreateInput!): Food
  createFoods(data: [FoodCreateInput!]!): [Food]
  updateFood(where: FoodWhereUniqueInput!, data: FoodUpdateInput!): Food
  updateFoods(data: [FoodUpdateArgs!]!): [Food]
  deleteFood(where: FoodWhereUniqueInput!): Food
  deleteFoods(where: [FoodWhereUniqueInput!]!): [Food]
  createReview(data: ReviewCreateInput!): Review
  createReviews(data: [ReviewCreateInput!]!): [Review]
  updateReview(where: ReviewWhereUniqueInput!, data: ReviewUpdateInput!): Review
  updateReviews(data: [ReviewUpdateArgs!]!): [Review]
  deleteReview(where: ReviewWhereUniqueInput!): Review
  deleteReviews(where: [ReviewWhereUniqueInput!]!): [Review]
  endSession: Boolean!
  authenticateUserWithPassword(
    email: String!
    password: String!
  ): UserAuthenticationWithPasswordResult
  createInitialUser(
    data: CreateInitialUserInput!
  ): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult =
    UserAuthenticationWithPasswordSuccess
  | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Query {
  users(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  restaurants(
    where: RestaurantWhereInput! = {}
    orderBy: [RestaurantOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Restaurant!]
  restaurant(where: RestaurantWhereUniqueInput!): Restaurant
  restaurantsCount(where: RestaurantWhereInput! = {}): Int
  foodCategories(
    where: FoodCategoryWhereInput! = {}
    orderBy: [FoodCategoryOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [FoodCategory!]
  foodCategory(where: FoodCategoryWhereUniqueInput!): FoodCategory
  foodCategoriesCount(where: FoodCategoryWhereInput! = {}): Int
  foods(
    where: FoodWhereInput! = {}
    orderBy: [FoodOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Food!]
  food(where: FoodWhereUniqueInput!): Food
  foodsCount(where: FoodWhereInput! = {}): Int
  reviews(
    where: ReviewWhereInput! = {}
    orderBy: [ReviewOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Review!]
  review(where: ReviewWhereUniqueInput!): Review
  reviewsCount(where: ReviewWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
